                    МІНІСТЕРСТВО ОСВІТИ І НАУКИ УКРАЇНИ
   ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ



                           Кафедра Програмної інженерії




                                        Звіт
                              з лабораторної роботи №4
                    з дисципліни: «Скриптові мови програмування»
з теми: «Структурування коду, робота з формами, автентифікація та авторизація»




Виконав:                                                              Перевірив:
ст. гр. ПЗПІ-23-3                                  Старший викладач кафедри ПІ
Білоус А. А.                                                       Сокорчук І. П.




                                   Харків – 2025
                                                                               2
4 СТРУКТУРУВАННЯ КОДУ, РОБОТА З ФОРМАМИ, АВТЕНТИФІКАЦІЯ
                                 ТА АВТОРИЗАЦІЯ
     4.1 Постановка задачі

     Ця лабораторна робота є розширенням попередньої, спрямована на
вдосконалення веб-застосунку «Інтернет-магазин» шляхом інтеграції механізмів
автентифікації,   авторизації,   управління   користувацькими      профілями   та
використання постійного зберігання даних за допомогою бази даних.
     Основні завдання для реалізації:
      –   додати систему автентифікації користувачів за логіном та паролем;
      –   забезпечити авторизацію, обмежуючи доступ до певних сторінок та
          функцій (наприклад, кошик, профіль) лише для залогінених користувачів;
      –   реалізувати функціонал створення та редагування користувацького
          профілю, включаючи зміну особистих даних (ім’я, прізвище, дата
          народження, опис) та можливість завантаження фотографії профілю;
      –   перевести зберігання даних про товари, користувачів та вміст кошика з
          сесійного сховища на персистентну базу даних (SQLite);
      –   впровадити безпечне зберігання паролів користувачів за допомогою
          хешування;
      –   вдосконалити структуру коду застосунку для кращого розділення
          відповідальності, зокрема, для обробки логіки автентифікації та
          публічних/приватних сторінок;
      –   забезпечити коректну обробку та відображення повідомлень про успіх/
          помилки для користувача;
      –   реалізувати перевірку (валідацію) введених даних при реєстрації та
          оновленні профілю (наприклад, вік, формат файлу фотографії);
      –   створити сторінку помилки 404 для неіснуючих або недоступних
          сторінок.

     4.2 Хід роботи

     У процесі виконання лабораторної роботи було суттєво розширено
функціонал веб-застосунку «Інтернет-магазин», додано ключові елементи безпеки
                                                                               3
та покращено архітектуру. Нижче описано інженерні рішення, підходи та технології,
які були використані для реалізації поставлених завдань.

     4.2.1 Архітектура застосунку та розподіл відповідальності

     На відміну від Лабораторної роботи №3, де застосунок був переважно клієнт-
серверним з обмеженим збереженням стану в сесіях, у цій роботі реалізовано
повноцінну трирівневу архітектуру:
      –   рівень даних (Model): Представлений файлом «data.php», який є
          абстракцією для взаємодії з базою даних SQLite. Він містить функції для
          роботи з таблицями «Products», «Users», та «Cart»;
      –   рівень бізнес-логіки (Service/Business Logic): Реалізований у файлі
          «functions.php». Цей файл містить функції, які інкапсулюють бізнес-
          правила, такі як автентифікація, керування профілем, та операції з
          кошиком. Вони взаємодіють з рівнем даних;
      –   рівень представлення (View): Залишається реалізованим за допомогою
          PHTML-файлів («.phtml» розширення), що відокремлюють HTML-
          розмітку від PHP-логіки відображення;
      –   рівень контролера (Controller): Центральним контролером є «index.php»,
          який визначає стан автентифікації користувача та делегує обробку
          запитів до «public.php» (для неавтентифікованих користувачів) або
          «private.php» (для автентифікованих). Таке розділення забезпечує чітке
          керування доступом.

     4.2.2 Постійне зберігання даних

     Для збереження даних про продукти, користувачів та вміст кошика між
сесіями було впроваджено базу даних SQLite. Це значне покращення порівняно з
використанням виключно сесійних змінних у Лабораторній роботі №3.
     а)   База даних «storage.db»: Створена та ініціалізована за допомогою
          «data.php»;
     б)   Таблиці:
                                                                           4
     1)   «Products»: Зберігає інформацію про товари (ідентифікатор, назва,
          ціна, опис, назва файлу зображення);
     2)   «Users»: Зберігає дані користувачів (ідентифікатор, логін, хеш
          пароля, ім’я, прізвище, дата народження, опис, назва файлу фото
          профілю, дата створення);
     3)   «Cart»: Зв’язує користувачів з продуктами в їхніх кошиках,
          зберігаючи кількість товару та час додавання. Використовує
          «PRIMARY KEY (user_id, product_id)» та «ON CONFLICT DO
          UPDATE» для елегантної обробки додавання товару до кошика, що
          вже містить цей товар;
в)   PDO (PHP Data Objects): Забезпечує безпечну та ефективну взаємодію з
     базою даних. Використання підготовлених запитів («prepare», «execute»)
     є фундаментальним для запобігання SQL-ін’єкціям;
г)   Патерн «Синглтон» для PDO: Функція «get_pdo()» у «data.php» реалізує
     патерн «синглтон», що гарантує єдиний екземпляр підключення до бази
     даних протягом життєвого циклу запиту, оптимізуючи ресурси.

4.2.3 Автентифікація та Авторизація

Реалізовано наскрізну систему автентифікації та авторизації:
а)   Вхід до системи («login()» у «functions.php»):
     1)   перевіряє наявність користувача за логіном у базі даних;
     2)   використовує «password_verify()» для безпечної перевірки пароля,
          порівнюючи наданий пароль з хешем, збереженим у базі даних.
          Паролі зберігаються хешованими за допомогою «password_hash()»
          з алгоритмом «PASSWORD_ARGON2ID», що є сучасною та
          безпечною практикою;
     3)   при успішному вході інформація про користувача зберігається у
          «$_SESSION[’user’]».
б)   Вихід із системи («logout()» у «functions.php»): Очищає сесійну
     інформацію про користувача, забезпечуючи вихід з облікового запису;
в)   Розділення публічного та приватного доступу:
     1)   «index.php» є головною точкою входу;
                                                                             5
     2)   «public.php» обробляє запити від неавтентифікованих користувачів,
          дозволяючи доступ лише до сторінок «Товари» та «Вхід». Будь-
          яка спроба доступу до «Кошика» або «Профілю» без автентифікації
          перенаправляє на сторінку 404 з відповідним повідомленням;
     3)   «private.php» обробляє запити від автентифікованих користувачів,
          надаючи доступ до всіх сторінок («Товари», «Кошик», «Профіль»)
          та функціоналу.

4.2.4 Управління профілем користувача та завантаження файлів

а)   Сторінка    профілю     («tpl/profile.phtml»):   Дозволяє    користувачам
     переглядати та редагувати свої особисті дані: логін, ім’я, прізвище, дата
     народження, короткий опис;
б)   Завантаження фотографій профілю:
     1)   реалізовано за допомогою поля «input type="file"» з атрибутом
          «enctype="multipart/form-data"» у формі;
     2)   файли зберігаються у директорії «uploads/» («UPLOADS_DIR» у
          «data.php»);
     3)   функція «update_profile()» у «functions.php» виконує перевірку
          завантаженого файлу: перевіряє MIME-тип (лише JPG, PNG, GIF),
          розмір файлу (до 4 MB) та обробляє можливі помилки завантаження
          («UPLOAD_ERR_OK»);
     4)   використовується     «move_uploaded_file()»       для     безпечного
          переміщення завантажених файлів;
в)   Перевірка даних профілю: Включає перевірку на порожні поля (логін,
     ім’я, прізвище), мінімальний вік (16 років), та максимальну довжину
     опису (200 символів). Також перевіряється унікальність логіну в базі
     даних.

4.2.5 Покращення взаємодії з користувачем

а)   Розширена система повідомлень: На відміну від Лабораторної роботи
     №3, де були лише загальні повідомлення, тепер реалізовано різні типи:
                                                                                6
           1)   «$_SESSION[’message’]»: Загальні інформаційні повідомлення;
           2)   «$_SESSION[’success_message’]»:    Повідомлення    про    успішне
                виконання операції;
           3)   «$_SESSION[’error_message’]»: Повідомлення про одну критичну
                помилку;
           4)   «$_SESSION[’error_list’]»: Масив повідомлень для відображення
                кількох помилок перевірок (наприклад, при оновленні профілю);
           5)   всі повідомлення відображаються у «tpl/header.phtml» та очищаються
                з сесії після відображення.
     б)    Сторінка 404 («tpl/404.phtml»): Спеціальна сторінка для обробки
           неіснуючих сторінок або спроб доступу до забороненого контенту, з
           динамічним повідомленням про причину помилки та посиланням на
           головну сторінку або сторінку входу;
     в)    Динамічне меню: «tpl/header.phtml» тепер динамічно відображає пункти
           меню («Увійти»/«Вийти», «Профіль») залежно від статусу автентифікації
           користувача;
      г)   XSS-захист: Функція «e($val)» (обгортка для «htmlspecialchars()»)
           використовується послідовно для всіх даних, що виводяться у HTML,
           запобігаючи міжсайтовому скриптингу.

     4.2.6 Оптимізація та безпека

     Статичні підготовлені запити: У «data.php» підготовлені запити (prepared
statements) кешуються як статичні змінні («static $query = null;»). Це дозволяє
уникнути повторного створення об’єктів запитів PDO для часто використовуваних
операцій, що може покращити продуктивність.
     Обробка винятків: Більшість операцій з базою даних обгорнуті у блоки «try-
catch», що дозволяє логувати помилки («error_log()») та відображати користувачеві
більш дружні повідомлення замість технічних помилок бази даних.
                                                                               7
     4.3 Висновки

     У ході виконання четвертої лабораторної роботи було суттєво розширено та
вдосконалено функціонал веб-застосунку «Інтернет-магазин», перетворивши його з
простої демонстрації кошика на повноцінну систему з користувацькими обліковими
записами. Було успішно реалізовано:
      –   наскрізна система автентифікації та авторизації: Користувачі тепер
          можуть входити в систему, і доступ до певних сторінок та функцій
          обмежений для неавторизованих користувачів;
      –   постійне зберігання даних: Перехід на базу даних SQLite для
          зберігання товарів, користувачів та кошика значно підвищив надійність
          та функціональність застосунку порівняно з ефемерним сесійним
          зберіганням Лабораторної роботи №3;
      –   керування профілями користувачів: Додано можливість редагувати
          особисті дані та завантажувати фотографії профілю з відповідною
          перевіркою;
      –   покращена архітектура: За допомогою розділення коду на моделі
          (взаємодія з БД), бізнес-логіку та контролери значно підвищило
          модульність, читабельність та легкість підтримки проекту. Це є важливим
          кроком до повноцінної MVC-архітектури;
      –   підвищення      безпеки:     Впроваджено        хешування      паролів
          («PASSWORD_ARGON2ID») та посилено захист від поширених веб-
          уразливостей (XSS, некоректні завантаження файлів, SQL-ін’єкції через
          PDO);
      –   розширений функціонал для користувача: Вдосконалена система
          повідомлень та сторінка 404 роблять взаємодію з застосунком більш
          інтуїтивною та інформативною.
     Загалом, реалізоване програмне забезпечення відповідає поставленим
вимогам і демонструє глибоке розуміння принципів розробки динамічних веб-
застосунків на PHP, включаючи роботу з базами даних, керування станом
користувача та безпеку.
                                                                               8
                                   ДОДАТОК А
                                   Відеозапис

     Відеозапис презентації результатів лабораторної роботи: https://youtu.be/e7U2T4WpypU


Хронологічний опис відеозапису:
     –   00:00 – Вступ та структура проекту;
     –   00:32 – Файл index.php;
     –   01:04 – Публічний функціонал у файлі public.php;
     –   01:35 – Функція логіну;
     –   02:13 – Обробка запитів сторінок у public.php;
     –   02:20 – Форма логіну;
     –   02:45 – Сторінка 404;
     –   03:12 – Функціонал private.php для авторизованих користувачів;
     –   03:30 – Функція виходу з системи;
     –   03:45 – Функція оновлення профілю;
     –   05:20 – Функція оновлення даних профілю в базі даних;
     –   05:40 – Обробка запитів сторінок у private.php;
     –   05:56 – Сторінка профілю;
     –   06:27 – Оновлення у шапці веб-сайту;
     –   06:46 – Нова структура проекту;
     –   07:30 – Нові таблиці бази даних;
     –   07:51 – Створення користувачів та хешування паролю;
     –   08:18 – Стуктура файлу функцій functions.php;
     –   08:55 – Обробка помилок у functions.php та кешування у data.php;
     –   09:45 – Демонстрація інтернет магазину;
     –   10:20 – Оновлення даних у профілі;
     –   11:50 – Перевірка збереження даних у кошику.
                                                                                 9
                                    ДОДАТОК Б
                                   Програмний код

       Б.1 Вміст файлу index.php

       GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/index.php

 1    <?php
 2    session_start();
 3
 4    require_once 'data.php';
 5    try {
 6        init_db();
 7    } catch (PDOException $e) {
 8        exit("DB initialization failed: " . $e->getMessage());
 9    }
10    require_once 'functions.php';
11
12    if (isset($_SESSION['user'])) {
13        require_once 'private.php';
14    } else {
15        require_once 'public.php';
16    }
17
18    include 'tpl/footer.phtml';
19


       Б.2 Вміст файлу data.php

       GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/data.php

  1    <?php
  2    define('DB_FILE', __DIR__ . '/storage.db');
  3    define('UPLOADS_DIR', __DIR__ . '/uploads/');
  4
  5    if (!is_dir(UPLOADS_DIR) && !mkdir(UPLOADS_DIR, 0775, true)) {
  6        exit('Failed to create uploads/ directory!');
  7    }
  8
  9    function get_pdo() {
 10        static $pdo = null;
 11
 12        if ($pdo === null) {
 13            try {
 14                $pdo = new PDO('sqlite:' . DB_FILE);
 15                $pdo->setAttribute(PDO::ATTR_ERRMODE,
       PDO::ERRMODE_EXCEPTION); // throw exeptions
                                                                            10

16               $pdo->setAttribute(PDO::ATTR_DEFAULT_FETCH_MODE,
     PDO::FETCH_ASSOC); // parse into dicts
17           } catch (PDOException $e) {
18               exit("DB connection failed: " . $e->getMessage());
19           }
20       }
21
22       return $pdo;
23   }
24
25
26   function products_get_all() {
27       static $query = null;
28
29       if ($query === null) {
30           $query = get_pdo()->prepare("SELECT * FROM Products ORDER BY
     price ASC");
31       }
32
33       $query->execute();
34       return $query->fetchAll(); // [] if none
35   }
36
37   function products_get_by_id($id) {
38       static $query = null;
39
40       if ($query === null) {
41           $query = get_pdo()->prepare("SELECT * FROM Products WHERE id
     = ?");
42       }
43
44       $query->execute([$id]);
45       return $query->fetch(); // false if not found
46   }
47
48
49   function users_insert($username, $password) {
50       static $query = null;
51
52       if ($query === null) {
53           $query = get_pdo()->prepare("INSERT INTO Users (username,
     password_hash) VALUES (?, ?)");
54       }
55
56       $query->execute([$username, $password]);
57       return $query->rowCount() > 0; // true if inserted
58   }
59
60   function users_get_by_id($id) {
61       static $query = null;
62
63       if ($query === null) {
64           $query = get_pdo()->prepare("SELECT * FROM Users WHERE id
     = ?");
65       }
66
                                                                            11

67        $query->execute([$id]);
68        return $query->fetch(); // false if not found
69    }
70
71    function users_get_by_username($username) {
72        static $query = null;
73
74        if ($query === null) {
75            $query = get_pdo()->prepare("SELECT * FROM Users WHERE
      username = ?");
 76       }
 77
 78       $query->execute([$username]);
 79       return $query->fetch(); // false if not found
 80   }
 81
 82   function users_update($data) {
 83       static $query = null;
 84
 85       if ($query === null) {
 86           $query = get_pdo()->prepare("
 87               UPDATE Users SET
 88                   username = ?,
 89                   password_hash = ?,
 90                   name = ?,
 91                   surname = ?,
 92                   birth_date = ?,
 93                   description = ?,
 94                   pfp_name = ?
 95               WHERE id = ?
 96           ");
 97       }
 98
 99       $query->execute([
100           $data['username'],
101           $data['password_hash'],
102           $data['name'],
103           $data['surname'],
104           $data['birth_date'],
105           $data['description'],
106           $data['pfp_name'],
107           $data['id']
108       ]);
109
110       return $query->rowCount() > 0; // true if updated
111   }
112
113
114   function cart_insert_or_update($user_id, $product_id, $quantity) {
115       static $query = null;
116
117       if ($query === null) {
118           $query = get_pdo()->prepare("
119               INSERT INTO Cart (user_id, product_id, quantity) VALUES
      (?, ?, ?)
120               ON CONFLICT(user_id, product_id)
                                                                            12

121                 DO UPDATE SET
122                     quantity = quantity + excluded.quantity,
123                     added_at = CURRENT_TIMESTAMP
124           ");
125       }
126
127       $query->execute([$user_id, $product_id, $quantity]);
128       return $query->rowCount() > 0; // true if insert/update was
      successful
129   }
130
131   function cart_fetch($user_id) {
132       static $query = null;
133
134       if ($query === null) {
135           $query = get_pdo()->prepare("
136               SELECT p.id, p.name, p.price, p.image_name, c.quantity
137               FROM Cart c
138               JOIN Products p ON c.product_id = p.id
139               WHERE c.user_id = ?
140               ORDER BY c.added_at DESC
141           ");
142       }
143
144       $query->execute([$user_id]);
145       return $query->fetchAll();
146   }
147
148   function cart_delete($user_id, $product_id) {
149       static $query = null;
150
151       if ($query === null) {
152           $query = get_pdo()->prepare("DELETE FROM Cart WHERE user_id
      = ? AND product_id = ?");
153       }
154
155       $query->execute([$user_id, $product_id]);
156       return $query->rowCount() > 0; // true if a row was deleted
157   }
158
159   function cart_delete_all($user_id) {
160       static $query = null;
161
162       if ($query === null) {
163           $query = get_pdo()->prepare("DELETE FROM Cart WHERE user_id
      = ?");
164       }
165
166       $query->execute([$user_id]);
167       return $query->rowCount(); // number of items removed
168   }
169
170
171   function init_db() {
172       if (file_exists(DB_FILE)) {
173           return;
                                                                           13

174       }
175       error_log("Initializing DB at: " . DB_FILE);
176
177       $pdo = get_pdo();
178
179       $pdo->exec("CREATE TABLE Products (
180            id INTEGER PRIMARY KEY AUTOINCREMENT,
181            name TEXT NOT NULL,
182            price REAL NOT NULL,
183            description TEXT,
184            image_name TEXT
185       )");
186       $products_query = $pdo->prepare("INSERT INTO Products (name,
      price, description, image_name) VALUES (?, ?, ?, ?)");
187
188       $pdo->exec("CREATE TABLE Users (
189            id INTEGER PRIMARY KEY AUTOINCREMENT,
190            username TEXT UNIQUE NOT NULL,
191            password_hash TEXT NOT NULL,
192            name TEXT,
193            surname TEXT,
194            birth_date DATE,
195            description TEXT,
196            pfp_name TEXT,
197            created_at DATETIME DEFAULT CURRENT_TIMESTAMP
198       )");
199
200       $pdo->exec("CREATE TABLE Cart (
201            user_id INTEGER NOT NULL,
202            product_id INTEGER NOT NULL,
203            quantity INTEGER NOT NULL DEFAULT 1,
204            added_at DATETIME DEFAULT CURRENT_TIMESTAMP,
205            PRIMARY KEY (user_id, product_id),
206            FOREIGN KEY (user_id) REFERENCES Users(id) ON DELETE CASCADE,
207            FOREIGN KEY (product_id) REFERENCES Products(id) ON DELETE
      CASCADE
208       )");
209       $cart_query = $pdo->prepare("INSERT INTO Cart (user_id,
      product_id, quantity) VALUES (?, 5, 1)");
210
211
212       $products = [
213           ['Кола', 45, 'Пляшка газованого солодкого напою', 'cola'],
214           ['Вода', 20, 'Пляшка питної мінеральної води', 'water'],
215           ['Хліб', 20.50, 'Свіжий хліб', 'bread'],
216           ['Кавун', 50, 'Смачний кавун з теплиці', 'watermelon'],
217           ['Слоненя', 500, 'М\'яке PHP слоненя', 'elephant'],
218           ['Тенші', 2081.97, 'Тенші фумо', 'tenshi'],
219           ['Windows', 7999, 'Ліцензія Windows 11 Pro', 'windows'],
220           ['Toyota Corolla', 916500, 'Нова Toyota Corolla 2025',
      'corolla'],
221       ];
222       foreach ($products as $product) {
223           $products_query->execute($product);
224       }
225
                                                                               14

226       $users = [
227           ['test', 'test'],
228           ['john', 'купуй слона'],
229       ];
230       foreach ($users as [$username, $password]) {
231           users_insert($username, password_hash($password,
      PASSWORD_ARGON2ID));
232           $cart_query->execute([$pdo->lastInsertId()]);
233       }
234   }
235


      Б.3 Вміст файлу functions.php

      GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/functions.php

  1   <?php
  2   function e($val) {
  3       return htmlspecialchars($val ?? '', ENT_QUOTES, 'UTF-8');
  4   }
  5
  6
  7   function get_products() {
  8       try {
  9           return products_get_all();
 10       } catch (PDOException $e) {
 11           error_log("DB error occured: " . $e);
 12       }
 13
 14       $_SESSION['error_message'] = 'Не вийшло отримати товари
      магазину.';
 15       return [];
 16   }
 17
 18
 19   function login($username, $password) {
 20       try {
 21           $user = users_get_by_username($username);
 22       } catch (PDOException $e) {
 23           error_log("DB error occured: " . $e);
 24           return false;
 25       }
 26
 27       if (!$user) {
 28           $_SESSION['error_message'] = 'Користувача не існує в
      системі!';
 29           return false;
 30       } else if(!password_verify($password, $user['password_hash'])) {
 31           $_SESSION['error_message'] = 'Невірний пароль!';
 32           return false;
 33       }
 34
                                                                           15

35       $_SESSION['user'] = $user;
36       $_SESSION['message'] = 'Ласкаво просимо, ' . ($user['name'] ?:
     'Гість') . '!';
37       return true;
38   }
39
40   function logout() {
41       // NOTE: don't session_destroy(), kills the message
42       if (isset($_SESSION['user'])) {
43           unset($_SESSION['user']);
44           $_SESSION['message'] = "Ви вийшли з системи.";
45           return true;
46       } else {
47           error_log("logout() got called when user is not
     authenticated!");
48       }
49       return false;
50   }
51
52   function update_profile($data) {
53       // update local values
54       foreach (['username', 'name', 'surname', 'birth_date',
     'description'] as $field) {
55           if (isset($data[$field])) {
56               $_SESSION['user'][$field] = $data[$field];
57           }
58       }
59
60       $errors = [];
61
62       // upload pfp to server
63       $pfp_file = $_FILES['pfp'];
64       $_SESSION['user']['pfp_name'] ??= uniqid('pfp_');
65       if (isset($_FILES['pfp']) && $pfp_file['error'] !=
     UPLOAD_ERR_NO_FILE) {
66           if (!in_array($pfp_file['type'], ['image/jpeg', 'image/png',
     'image/gif'])) {
67               $errors[] = "Некоректний тип файлу аватара! Дозволені:
     JPG, PNG, GIF.";
68           } else if ($pfp_file['size'] > 4 * 1024 * 1024) {
69               $errors[] = "Файл занадто великий! Максимальний розмір: 4
     MB.";
70           } else if ($pfp_file['error'] !== UPLOAD_ERR_OK) {
71               $errors[] = "Помилка завантаження файлу! Код помилки: " .
     $pfp_file['error'];
72           } else if (!move_uploaded_file($pfp_file['tmp_name'],
     UPLOADS_DIR . $_SESSION['user']['pfp_name'])) {
73               $errors[] = "Не вдалося завантажити картинку профілю!";
74           }
75       }
76
77       // local checks
78       if (empty($_SESSION['user']['username'])) $errors[] = "Логін не
     може бути порожнім!";
79       if (empty($_SESSION['user']['name'])) $errors[] = "Ім'я не може
     бути порожнє!";
                                                                           16

80        if (empty($_SESSION['user']['surname'])) $errors[] = "Прізвище не
      може бути порожнє!";
81        if (!empty($_SESSION['user']['birth_date'])
82            && strtotime($_SESSION['user']['birth_date']) > strtotime('-16
      years')) {
 83           $errors[] = "Користувачеві має бути не менше 16 років!";
 84       }
 85       if (mb_strlen($_SESSION['user']['description']) > 200) {
 86           $errors[] = "Опис має містити не більше 200 символів!";
 87       }
 88
 89       if (!empty($errors)) {
 90           $_SESSION['error_list'] = $errors;
 91           return false;
 92       }
 93
 94       // remote checks
 95       try {
 96           $user = users_get_by_username($_SESSION['user']['username']);
 97           if ($user && $user['id'] != $_SESSION['user']['id']) {
 98               $_SESSION['error_message'] = 'Логін вже зайнятий!';
 99               return false;
100           }
101       } catch (PDOException $e) {
102           $_SESSION['error_message'] = 'Не вийшло перевірити логін на
      доступність.';
103           error_log("DB error occured: " . $e);
104           return false;
105       }
106
107       // update remote data
108       try {
109           users_update($_SESSION['user']);
110       } catch (PDOException $e) {
111           error_log("DB error occured: " . $e);
112           $_SESSION['error_message'] = 'Не вийшло зберегти дані.';
113           return false;
114       }
115
116       $_SESSION['message'] = "Профіль успішно оновлено.";
117       return true;
118   }
119
120
121   function add_to_cart($product_id, $quantity) {
122       if ($quantity < 1) {
123           $_SESSION['error_message'] = 'Не можна купити менше одного
      товару!';
124           return false;
125       }
126       if ($quantity > 99) {
127           $_SESSION['error_message'] = 'Не можна купити більше 99
      товарів!';
128           return false;
129       }
130
                                                                          17

131       try {
132           $product = products_get_by_id($product_id);
133           if (!$product) {
134               $_SESSION['error_message'] = 'Товар не зайдено!';
135               return false;
136           }
137
138           if (cart_insert_or_update($_SESSION['user']['id'],
      $product_id, $quantity)) {
139               $_SESSION['success_message'] = 'Товар "' .
      $product['name'] . '" додано до кошику.';
140               return true;
141           }
142       } catch (PDOException $e) {
143           error_log("DB error occured: " . $e);
144       }
145
146       $_SESSION['error_message'] = 'Не вийшло додати товар до кошику.';
147       return false;
148   }
149
150   function get_cart() {
151       try {
152           return cart_fetch($_SESSION['user']['id']);
153       } catch (PDOException $e) {
154           error_log("DB error occured: " . $e);
155       }
156
157       $_SESSION['error_message'] = 'Не вийшло отримати товари в
      кошику.';
158       return [];
159   }
160
161   function calculate_cart_total($cart_items) {
162       $cart_total = 0;
163       foreach ($cart_items as $item) {
164           $cart_total += $item['price'] * $item['quantity'];
165       }
166       return $cart_total;
167   }
168
169   function remove_from_cart($product_id) {
170       try {
171           if (cart_delete($_SESSION['user']['id'], $product_id)) {
172               $_SESSION['success_message'] = 'Товар видалено з кошика.';
173               return true;
174           }
175       } catch (PDOException $e) {
176           error_log("DB error occured: " . $e);
177       }
178
179       $_SESSION['error_message'] = 'Не вийшло видалити товар з кошику.';
180       return false;
181   }
182
183   function clear_cart() {
                                                                               18

184       try {
185           if (cart_delete_all($_SESSION['user']['id'])) {
186               $_SESSION['success_message'] = 'Кошик очищено.';
187               return true;
188           }
189       } catch (PDOException $e) {
190           error_log("DB error occured: " . $e);
191       }
192
193       $_SESSION['error_message'] = 'Не вийшло очистити кошик.';
194       return false;
195   }
196


      Б.4 Вміст файлу private.php

      GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/private.php

 1 <?php
 2 if (isset($_GET['action'])) {
 3     switch($_GET['action']) {
 4         case 'logout':
 5             logout();
 6             header('Location: index.php?page=products');
 7             exit;
 8
 9         case 'add_to_cart':
10             if (isset($_POST['product_id'])) {
11                 add_to_cart($_POST['product_id'], $_POST['quantity'] ??
   1);
12             }
13             header('Location: index.php?page=products');
14             exit;
15
16         case 'remove_from_cart':
17             if (isset($_POST['product_id'])) {
18                 remove_from_cart($_POST['product_id']);
19             }
20             header('Location: index.php?page=cart');
21             exit;
22
23         case 'clear_cart':
24             clear_cart();
25             header('Location: index.php?page=cart');
26             exit;
27
28         case 'update_profile':
29             update_profile($_POST);
30             header('Location: index.php?page=profile');
31             exit;
32     }
33 }
                                                                                  19

34
35
36   $cart_items = get_cart(); // needed for cart.phtml
37   $cart_item_count = count($cart_items); // and header.phtml also
38   include 'tpl/header.phtml';
39
40   switch ($_GET['page'] ?? 'products') {
41       case 'products':
42           $products = get_products();
43           include 'tpl/products.phtml';
44           break;
45
46         case 'cart':
47             $cart_total = calculate_cart_total($cart_items);
48             include 'tpl/cart.phtml';
49             break;
50
51         case 'profile':
52             include 'tpl/profile.phtml';
53             break;
54
55         default:
56             include 'tpl/404.phtml';
57             break;
58   }
59


         Б.5 Вміст файлу public.php

         GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/public.php

 1   <?php
 2   if (isset($_GET['action'])) {
 3       if ($_GET['action'] !== 'login') {
 4           $_SESSION['message404'] = 'Доступ до цієї дії обмежений.';
 5           header('Location: index.php?page=404');
 6           exit;
 7       }
 8
 9         if (isset($_POST['username']) && isset($_POST['password'])
10             && login($_POST['username'], $_POST['password'])) {
11             header('Location: index.php?page=products');
12             exit;
13         }
14
15         header('Location: index.php?page=login');
16         exit;
17   }
18
19   include 'tpl/header.phtml';
20
21   switch ($_GET['page'] ?? 'products') {
                                                                                20

22       case 'login':
23           include 'tpl/login.phtml';
24           break;
25
26       case 'products':
27           $products = get_products();
28           include 'tpl/products.phtml';
29           break;
30
31       case 'cart':
32       case 'profile':
33           $_SESSION['message404'] = 'Доступ до цієї сторінки обмежений.';
34           // FALLTHROUGH
35       case '404':
36       default:
37           include 'tpl/404.phtml';
38           break;
39 }
40


       Б.6 Вміст файлу tpl/header.phtml

       GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/tpl/header.phtml

 1 <!DOCTYPE html>
 2 <html lang="uk">
 3 <head>
 4     <meta charset="UTF-8">
 5     <meta name="viewport" content="width=device-width, initial-
   scale=1.0">
 6     <title>Web-Магазин</title>
 7     <link rel="stylesheet" href="style.css">
 8 </head>
 9 <body>
10 <header>
11     <div class="container">
12          <h1><a href="index.php">Web-Магазин</a></h1>
13
14          <nav><ul>
15          <li><a href="index.php?page=products">Товари</a></li>
16          <?php if (isset($_SESSION['user'])): ?>
17              <li><a href="index.php?page=cart">Кошик (<?=
   e($cart_item_count); ?>)</a></li>
18              <li><a href="index.php?page=profile">Профіль (<?=
   e($_SESSION['user']['username'] ?: 'Гість'); ?>)</a></li>
19              <li><a href="index.php?action=logout">Вийти</a></li>
20          <?php else: ?>
21              <li><a href="index.php?page=login">Увійти</a></li>
22          <?php endif; ?>
23          </ul></nav>
24     </div>
25 </header>
                                                                              21

26 <main class="container">
27 <?php
28     if (isset($_SESSION['message'])) {
29         echo '<p class="message">' . e($_SESSION['message']) . '</p>';
30         unset($_SESSION['message']);
31     }
32     if (isset($_SESSION['success_message'])) {
33         echo '<p class="message success">' .
   e($_SESSION['success_message']) . '</p>';
34         unset($_SESSION['success_message']);
35     }
36     if (isset($_SESSION['error_message'])) {
37         echo '<p class="message error">' .
   e($_SESSION['error_message']) . '</p>';
38         unset($_SESSION['error_message']);
39     }
40     if (!empty($_SESSION['error_list'])) {
41         echo '<ul class="message error">';
42         foreach ($_SESSION['error_list'] as $error) {
43             echo '<li>' . e($error) . '</li>';
44         }
45         echo '</ul>';
46         unset($_SESSION['error_list']);
47     }
48 ?>
49


     Б.7 Вміст файлу tpl/products.phtml

     GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/tpl/products.phtml

 1 <h2>Список товарів</h2>
 2 <div class="products-grid">
 3     <?php if (empty($products)): ?>
 4     <p>На даний момент товарів немає.</p>
 5     <?php else: ?>
 6
 7     <?php foreach ($products as $product): ?> <div class="product-
   card">
 8
 9         <img src="images/<?= e($product['image_name'] ?: 'default'); ?
   >" alt="<?= e($product['name']); ?>">
10         <h3><?= e($product['name']); ?></h3>
11         <p class="price"><?= number_format($product['price'], 2); ?>
   грн</p>
12         <p><?= e($product['description']); ?></p>
13
14         <form action="index.php?action=add_to_cart" method="post">
15             <input type="hidden" name="product_id" value="<?=
   $product['id']; ?>">
16             <label for="quantity_<?= $product['id']; ?>">Кількість:</
   label>
                                                                              22

17             <input type="number" id="quantity_<?= $product['id']; ?>"
   name="quantity" value="1" min="1" max="99" style="width: 50px;">
18             <button type="submit">Купити</button>
19         </form>
20
21     </div> <?php endforeach; ?>
22
23     <?php endif; ?>
24 </div>
25


     Б.8 Вміст файлу tpl/404.phtml

     GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/tpl/404.phtml

 1 <div class="page404-container">
 2     <?php if (isset($_SESSION['message404'])): ?>
 3          <h2><?= e($_SESSION['message404']);
   unset($_SESSION['message404']); ?></h2>
 4          <?php if (!isset($_SESSION['user'])): ?>
 5              <p><a href="index.php?page=login">Будь ласка, увійдіть до
   системи.</a></p>
 6          <?php endif; ?>
 7     <?php else: ?>
 8          <h2>Помилка 404 - Сторінку не знайдено</h2>
 9          <p>Вибачте, сторінка, яку ви шукаєте, не існує.</p>
10     <?php endif; ?>
11     <p><a href="index.php">Повернутися на головну</a></p>
12 </div>
13 <style>
14     .page404-container { text-align: center; padding: 40px 20px; }
15     .page404-container h2 { font-size: 1.5em; color: #333; margin-
   bottom: 20px;}
16 </style>
17


     Б.9 Вміст файлу tpl/login.phtml

     GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/tpl/login.phtml

 1 <h2 class = "login-heading">Вхід до системи</h2>
 2 <form action="index.php?action=login" method="post" class="login-form">
 3     <div>
 4         <label for="username">Ім'я користувача:</label>
 5         <input type="text" id="username" name="username" required
   autofocus>
 6     </div>
 7     <div>
                                                                               23

 8         <label for="password">Пароль:</label>
 9         <input type="password" id="password" name="password" required>
10     </div>
11     <button type="submit">Увійти</button>
12 </form>
13


      Б.10 Вміст файлу tpl/cart.phtml

      GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/tpl/cart.phtml

 1 <h2>Ваш кошик</h2>
 2 <?php if (empty($cart_items)): ?>
 3     <p>Ваш кошик порожній. <a href="index.php?page=products">Перейти до
   покупок</a>.</p>
 4 <?php else: ?>
 5
 6 <table class="cart-table">
 7     <thead> <tr>
 8         <th>Зображення</th>
 9         <th>Назва</th>
10         <th>Ціна</th>
11         <th>Кількість</th>
12         <th>Сума</th>
13         <th>Дія</th>
14     </tr> </thead>
15
16     <tbody> <?php foreach ($cart_items as $item): ?> <tr>
17         <td><img src="images/<?= e($item['image_name'] ?: 'default'); ?
   >" alt="<?= e($item['name']); ?>" style="width:50px; height:auto;"></
   td>
18         <td><?= e($item['name']); ?></td>
19         <td><?= number_format($item['price'], 2); ?> грн</td>
20         <td><?= $item['quantity']; ?></td>
21         <td><?= number_format($item['price'] * $item['quantity'], 2); ?
   > грн</td>
22         <td> <form action="index.php?action=remove_from_cart"
   method="post" style="display:inline;">
23              <input type="hidden" name="product_id" value="<?=
   $item['id']; ?>">
24              <button type="submit" class="remove-btn">Вилучити</button>
25         </form> </td>
26     </tr> <?php endforeach; ?> </tbody>
27
28     <tfoot> <tr>
29         <td colspan="4" style="text-align:right;"><strong>Загалом:</
   strong></td>
30         <td><strong><?= number_format($cart_total, 2); ?> грн</
   strong></td>
31         <td> <form action="index.php?action=clear_cart" method="post">
32              <button type="submit" class="clear-btn">Очистити кошик</
   button>
                                                                               24

33          </form> </td>
34     </tr> </tfoot>
35 </table>
36
37 <?php endif; ?>
38


      Б.11 Вміст файлу tpl/profile.phtml

      GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/tpl/profile.phtml

 1 <?php
 2     $user = $_SESSION['user'];
 3     $pfp_path = 'images/default_pfp';
 4     if (isset($user['pfp_name']) && file_exists(UPLOADS_DIR .
   $user['pfp_name'])) {
 5         $pfp_path = 'uploads/' . $user['pfp_name'];
 6     }
 7     error_log($pfp_path);
 8 ?>
 9
10 <h2 class="profile-heading">Профіль користувача: <?=
   e($user['username'] ?: 'Гість'); ?></h2>
11
12 <div class="profile-layout">
13     <div class="profile-pfp-section">
14         <img src="<?= e($pfp_path); ?>" alt="Картинка профілю"
   class="profile-pfp-img">
15     </div>
16
17     <form action="index.php?action=update_profile" method="post"
   enctype="multipart/form-data" class="profile-form">
18         <div>
19             <label for="username">Логін</label>
20             <input type="text" id="username" name="username" value="<?=
   e($user['username']); ?>" required>
21         </div>
22         <div>
23             <label for="name">Ім'я:</label>
24             <input type="text" id="name" name="name" value="<?=
   e($user['name']); ?>" required>
25         </div>
26         <div>
27             <label for="surname">Прізвище:</label>
28             <input type="text" id="surname" name="surname" value="<?=
   e($user['surname']); ?>" required>
29         </div>
30         <div>
31             <label for="birth_date">Дата народження:</label>
32             <input type="date" id="birth_date" name="birth_date"
   value="<?= e($user['birth_date']); ?>">
33         </div>
                                                                                25

34             <div>
35                 <label for="description">Короткий опис (до 200 символів):</
      label>
36                <textarea id="description" name="description" rows="3"
      maxlength="200"><?= e($user['description']); ?></textarea>
37            </div>
38            <div>
39                <label for="pfp">Змінити картинку профілю (JPG, PNG, GIF,
      до 4 MB):</label>
40                <input type="file" id="pfp" name="pfp" accept="image/
      jpeg,image/png,image/gif">
41            </div>
42            <button type="submit">Зберегти зміни</button>
43        </form>
44    </div>
45


       Б.12 Вміст файлу tpl/footer.phtml

       GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/tpl/footer.phtml

1    </main>
2    <footer>
3        <div class="container">
4             <p>© <?= date('Y'); ?> Web-Магазин. Усі права захищено.</p>
5        </div>
6    </footer>
7    </body>
8    </html>
9


       Б.13 Вміст файлу style.css

       GitHub репозиторій: https://github.com/NureBilousAnton/smp-pzpi-23-3-bilous-anton/blob/main/Lab4/smp-pzpi-23-3-bilous-anton-lab4/style.css

  1    html { height: 100%; }
  2
  3    body {
  4        margin: 0;
  5        padding: 0;
  6        line-height: 1.6;
  7        font-family: Arial, sans-serif;
  8        color: #333;
  9        background-color: #f4f4f4;
 10        /* sticky footer */
 11        display: flex;
 12        flex-direction: column;
 13        min-height: 100vh; /* take whole viewport */
                                                  26

14   }
15
16   .container {
17       width: 80%;
18       margin: auto;
19       overflow: hidden;
20       padding: 0 20px;
21   }
22
23   header {
24       color: #fff;
25       background: #333;
26       padding-top: 25px;
27       padding-bottom: 25px;
28       border-bottom: #0779e4 3px solid;
29   }
30
31   header .container {
32       display: flex;
33       justify-content: space-between;
34       width: 80%;
35       margin: auto;
36       overflow: hidden;
37       align-items: center;
38   }
39
40
41   header a {
42       color: #fff;
43       font-size: 16px;
44       text-decoration: none;
45       text-transform: uppercase;
46   }
47
48   header h1 {
49       margin: 0;
50       font-size: 24px;
51   }
52   header h1 a { font-size: inherit; }
53
54   header ul {
55       margin: 0;
56       padding: 0;
57       display: flex;
58       list-style: none;
59   }
60   header li {
61       display: inline;
62       padding: 0 0 0 20px;
63   }
64   header li:first-child { padding-left: 0; }
65
66   main.container {
67       flex-grow: 1; /* push the footer */
68       padding: 20px 0;
69   }
                                                                          27

 70
 71
 72   .message {
 73       padding: 10px;
 74       border-radius: 5px;
 75       margin-bottom: 15px;
 76       color: #006600;
 77       background-color: #e6ffe6;
 78       border: 1px solid #b3ffb3;
 79   }
 80   .message.success {
 81       color: #3c763d;
 82       background-color: #dff0d8;
 83       border: 1px solid #d6e9c6;
 84   }
 85
 86   .message.error, ul.message.error {
 87       color: #a94442;
 88       background-color: #f2dede;
 89       border: 1px solid #ebccd1;
 90   }
 91   ul.message.error {
 92       padding-left: 20px;
 93       list-style-position: inside;
 94   }
 95   ul.message.error li { margin-bottom: 5px; }
 96
 97
 98   .products-grid {
 99       display: grid;
100       gap: 20px;
101       grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
102   }
103
104   .product-card {
105       padding: 15px;
106       text-align: center;
107       background: #fff;
108       border: 1px solid #ddd;
109       border-radius: 7px;
110   }
111
112   .product-card img {
113       height: 150px;
114       max-width: 100%;
115       object-fit: contain;
116       margin-bottom: 10px;
117   }
118
119   .product-card h3 {
120       margin-top: 0;
121       color: #0779e4;
122   }
123
124   .product-card .price {
125       font-weight: bold;
                                                                   28

126       color: #5cb85c;
127   }
128
129   .product-card form { margin-top: 10px; }
130   .product-card label { margin-right: 5px; }
131
132   .product-card input[type="number"] {
133       padding: 5px;
134       border: 1px solid #ccc;
135       border-radius: 3px;
136       margin-right: 10px;
137   }
138
139   button, .button {
140       color: white;
141       background-color: #0779e4;
142       padding: 8px 15px;
143       text-align: center;
144       text-decoration: none;
145       display: inline-block;
146       font-size: 14px;
147       border: none;
148       border-radius: 5px;
149       cursor: pointer;
150       transition: background-color 0.3s ease;
151   }
152
153   button:hover, .button:hover { background-color: #055aab; }
154
155   .remove-btn { background-color: #d9534f; }
156   .remove-btn:hover { background-color: #c9302c; }
157
158   .clear-btn { background-color: #f0ad4e; }
159   .clear-btn:hover { background-color: #ec971f; }
160
161
162   .cart-table {
163       width: 100%;
164       border-collapse: collapse;
165       margin-top: 20px;
166       background: #fff;
167   }
168
169   .cart-table th, .cart-table td {
170       padding: 10px;
171       text-align: left;
172       border: 1px solid #ddd;
173   }
174
175   .cart-table th {
176       background-color: #f0f0f0;
177   }
178
179   .cart-table img {
180       margin: auto;
181       display: block;
                                                    29

182   }
183
184   .cart-table tfoot td { font-weight: bold; }
185
186   .login-heading {
187       max-width: 500px;
188       margin: 20px auto 0 auto;
189       text-align: center;
190   }
191
192   .login-form, .profile-form {
193       max-width: 500px;
194       margin: 20px auto;
195       padding: 20px;
196       background: #fff;
197       border: 1px solid #ddd;
198       border-radius: 5px;
199   }
200
201   .login-form div, .profile-form div {
202       margin-bottom: 15px;
203   }
204
205   .login-form label, .profile-form label {
206       display: block;
207       margin-bottom: 5px;
208       font-weight: bold;
209   }
210
211   .login-form input[type="text"],
212   .login-form input[type="password"],
213   .profile-form input[type="text"],
214   .profile-form input[type="date"],
215   .profile-form input[type="file"],
216   .profile-form textarea {
217       width: 100%;
218       padding: 10px;
219       border: 1px solid #ccc;
220       border-radius: 4px;
221       box-sizing: border-box;
222   }
223   .profile-form textarea {
224       resize: vertical;
225   }
226
227   .login-form button[type="submit"],
228   .profile-form button[type="submit"] {
229       display: block;
230       margin-left: auto;
231   }
232
233   .profile-heading {
234       max-width: 800px;
235       margin: 0 auto 20px auto;
236   }
237
                                                    30

238   .profile-layout {
239       display: flex;
240       gap: 20px;
241       align-items: flex-start;
242       max-width: 800px;
243       margin: 0 auto;
244   }
245   .profile-pfp-section {
246       flex-basis: 150px;
247       flex-shrink: 0;
248       text-align: center;
249   }
250   .profile-pfp-img {
251       width: 150px;
252       height: 150px;
253       border-radius: 15%;
254       object-fit: cover;
255       border: 3px solid #ddd;
256   }
257   .profile-form {
258       flex-basis: 500px;
259       flex-grow: 1;
260       margin: 0;
261   }
262
263   @media (max-width: 768px) {
264       .profile-layout {
265           flex-direction: column;
266           align-items: center;
267       }
268       .profile-pfp-section {
269           margin-bottom: 10px;
270       }
271       .profile-form {
272           width: 100%;
273       }
274   }
275
276   footer {
277       color: #fff;
278       background: #333;
279       padding: 10px;
280       text-align: center;
281       margin-top: auto; /* push the footer */
282       width: 100%;
283   }
284

